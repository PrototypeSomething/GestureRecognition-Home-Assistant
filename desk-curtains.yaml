esphome:
  name: desk
  friendly_name: Desk
  # PlatformIO build options
  platformio_options:
    build_flags: -DBOARD_HAS_PSRAM
    board_build.arduino.memory_type: qio_opi
    board_build.f_flash: 80000000L
    board_build.flash_mode: qio 

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "OHqHh3NaCM6mQvdP7X1uOpeScyiOiZFXuzXNtVaeBJk="
  services:
    - service: control_cover
      variables:
        target: int
      then:
        - stepper.set_target:
            id: my_stepper
            target: !lambda 'return target;'
        - sensor.template.publish:
            id: position
            state: !lambda 'return target;'

ota:
  password: "71a1c157275d897d5621b3412354273a"

web_server: # sätter upp port för web-server att skicka funktionskallelser till från home assistant
  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Desk-Curtains Fallback Hotspot"
    password: "tGT5FYo5i4JF"

captive_portal:

# configuration for light module for setting curtains
light:
  - platform: monochromatic
    name: "Curtain"
    output: output_stepper
    default_transition_length: 0.0s

output:
  - platform: template
    id: output_stepper
    type: float
    write_action:
      - stepper.set_target:
          id: my_stepper
          target: !lambda return (pow(float(state), 1/(2.8/1.0038)) * 4096 * (0.8 / (0.025 * 3.14)));
      - sensor.template.publish:
          id: position
          state: !lambda return id(my_stepper).target_position;

sensor:
  - platform: template
    name: "Curtain Step"
    id: position

stepper:
  - platform: uln2003
    id: my_stepper
    pin_a: 44
    pin_b: 7
    pin_c: 8
    pin_d: 9
    max_speed: 1000 steps/s
    step_mode: HALF_STEP
    acceleration: 2000
    deceleration: 2000

# Configuration for the ESP32 Camera
esp32_camera:
  name: Desk Camera
  external_clock:
    pin: GPIO10
    frequency: 20MHz
  i2c_pins:
    sda: GPIO40
    scl: GPIO39
  data_pins: [GPIO15, GPIO17, GPIO18, GPIO16, GPIO14, GPIO12, GPIO11, GPIO48]
  vsync_pin: GPIO38
  href_pin: GPIO47
  pixel_clock_pin: GPIO13
  resolution: 400X296
  
# valid options are '160X120', 'QQVGA', '176X144', 'QCIF', 
# '240X176', 'HQVGA', '320X240', 'QVGA', '400X296', 'CIF',
# '640X480', 'VGA', '800X600', 'SVGA', '1024X768', 'XGA',
# '1280X1024', 'SXGA', '1600X1200', 'UXGA', '1920X1080', 
# 'FHD', '720X1280', 'PHD', '864X1536', 'P3MP', '2048X1536',
# 'QXGA', '2560X1440', 'QHD', '2560X1600', 'WQXGA', '1080X1920',
# 'PFHD', '2560X1920', 'QSXGA'.

# Configuration for the ESP32 Camera Web Server
esp32_camera_web_server:
  - port: 8080
    mode: stream
  - port: 8081
    mode: snapshot